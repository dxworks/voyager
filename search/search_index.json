{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to Voyager","text":"<p>Voyager is a software analysis tool aggregator.</p> <p>Visit us on Github!</p>"},{"location":"index.html#quick-start","title":"Quick Start","text":"<p>If you want to dive right in, visit our Quickstart Guide.</p>"},{"location":"configuration.html","title":"Configuration","text":"<p>Voyenv declares the voyager release in a <code>yml</code> file. A voyenv.yml example:</p> <pre><code># Name of the release (a folder with this name will be created in the working directory)\nname: voyager-test-1\n# The Voyager version to download. See at https://github.com/dxworks/voyager/releases \nvoyager_version: v1.4.1\n# A list of instruments to download (from Github only)\ninstruments:\n# Name in owner/repo format\n- name: dxworks/voyager-git-log-instrument\n# The tag to find the specific release / tag\n# If not specified voyenv pulls all tags matching v*-voyager \n# and chooses the one with the highest semver\ntag: v1.0.0\n# The asset to download from the release \n# If not specified, the source code zip for the tag will be downloaded\nasset: git-log.zip\n- name: dxworks/lizard\n#    tag: v1.17.9-voyager\n- name: dxworks/metrixplusplus\n#    tag: v1.7.1-voyager\n- name: dxworks/inspector-git\nasset: iglog.zip\n- name: dxworks/dude\nasset: dude-voyager.zip\n- name: dxworks/insider\nasset: insider-voyager.zip\n- name: dxworks/honeydew\nasset: honeydew.zip\n- name: dxworks/jafax\nasset: jafax.zip\n- name: dxworks/maven-miner\nasset: maven-miner-voyager.zip\n- name: dxworks/npm-miner\nasset: npm-miner-voyager.zip\n\n# A list of Github tokens. To get the latest tagged release of a voyager instrument,\n# voyenv uses the Github Rest API. Due to rate limits of the Github Rest API\n# it might be the case that the voyenv installation will stop due to rate limits.\n# To avoid this, generate a Github Personal Access token and add it here\ntokens:\n\n# A map of runtimes please check the runtimes configuration section for more details\nruntimes:\njava:\nversion: 11\nplatform: mac\narch: x64\npython:\nversion: 3.9.4\nplatform: mac\narch: x86_64\n</code></pre>"},{"location":"configuration.html#instruments-configuration","title":"Instruments Configuration","text":"<p>TBA</p>"},{"location":"configuration.html#runtimes-configuration","title":"Runtimes Configuration","text":"<p>Currently, Voyenv only supports adding Java and Python runtime environments.</p> <p>The options you have to configure the two runtimes are: <pre><code>    # get java versions from https://github.com/AdoptOpenJDK/openjdk11-binaries/releases/tag/jdk-11.0.11%2B9_openj9-0.26.0 or api from https://api.adoptopenjdk.net/q/swagger-ui/#/Assets/searchReleases\n# getting java options by calling links like https://api.adoptopenjdk.net/v3/assets/feature_releases/11/ga?architecture=x64&amp;jvm_impl=hotspot&amp;os=macos\njava:\nversion: 11.1\nplatform: windows | linux | mac\narch: x86 | x64\n\n# get python runtimes from https://github.com/indygreg/python-build-standalone/releases\npython:\nversion: 3.9.1\nplatform: windows | linux | mac\narch: x86 | x64 | ...\n</code></pre></p>"},{"location":"docker-quickstart.html","title":"Docker quickstart","text":""},{"location":"docker-quickstart.html#voyager-docker-quickstart","title":"Voyager Docker Quickstart","text":"<p>The docker image for voyager is available on Dockerhub under the name <code>dxworks/voyager</code>.</p>"},{"location":"docker-quickstart.html#prepare-target-folder","title":"Prepare TARGET Folder","text":"<p>The <code>TARGET</code> folder is the folder that Voyager will analyze. The children of the <code>TARGET</code> folder should be folders that are git repositories.</p> <p>To create a correct configuration for voyager, open a terminal window in a folder of your choosing and run the following steps:</p>"},{"location":"docker-quickstart.html#create-an-empty-target-folder","title":"Create an empty target folder","text":"<pre><code>mkdir voyager-target\ncd voyager-target\n</code></pre>"},{"location":"docker-quickstart.html#clone-repositories","title":"Clone repositories","text":"<p>Clone all repositories you want to analyze in the voyager-repos folder. Make sure to checkout the main branch for each repository. <pre><code>git clone &lt;repo1-url&gt;\ncd &lt;repo1&gt;\ngit checkout &lt;repo1-main-branch&gt;\n\ngit clone &lt;repo2-url&gt;\ncd &lt;repo2&gt;\ngit checkout &lt;repo2-main-branch&gt;\n</code></pre></p>"},{"location":"docker-quickstart.html#final-structure","title":"Final Structure:","text":"<p>In the end you should get a folder structure that looks like this: <pre><code>voyager-target\n    repo1\n        .git\n        ...\n    repo2\n        .git\n        ...\n    ...\n    repoN\n        .git\n        ...\n</code></pre></p>"},{"location":"docker-quickstart.html#the-target-directory","title":"The TARGET Directory","text":"<p>The <code>TARGET</code> directory is the absolute path to the <code>voyager-target</code> folder defined in the steps above.</p>"},{"location":"docker-quickstart.html#prepare-docker-run","title":"Prepare Docker run","text":"<p>The <code>dxworks/voyager</code> image is executable and needs 2 volumes to be mounted:</p> <ol> <li>the <code>TARGET</code> path that needs to be mounted at <code>/usr/project</code></li> <li>The <code>results</code> folder, that needs to be mounted at <code>/usr/voyager/results</code></li> </ol>"},{"location":"docker-quickstart.html#run-voyager","title":"Run voyager","text":""},{"location":"docker-quickstart.html#using-docker","title":"Using Docker","text":"<p>To run voyager, run the following command from the <code>TARGET</code> directory:</p> <p><pre><code>mkdir results\ndocker run -v $(PWD):/usr/project -v $(PWD)/results:/usr/voyager/results dxworks/voyager\n</code></pre> Alternatively, you can adjust the volume mounts to point to the <code>TARGET</code> folder and to a result folder.</p> <p>You may also add any environment variables you would normally add to the <code>mission.yml</code> file, directly to the container.  Check out the docker documentation on how to add environment variables to containers.</p>"},{"location":"docker-quickstart.html#using-docker-compose","title":"Using docker-compose","text":"<p>If you prefer to use docker-compose, you may copy the following file to an empty folder: <pre><code>version: '3.8'\n\nservices:\nvoyager:\nimage: dxworks/voyager\nvolumes:\n- ./results:/usr/voyager/results # please mount a new folder where the result archive will be added\n- .:/usr/project # please input the target folder you want to analyse\n#      - ${custom-mission-path}: /usr/voyager/mission.yml\n\n#    Add any environment variables you would pass to the mission.yml. For example:\n#    environment:\n#      IG_INCOGNITO: true\n#      DUDE_LANGUAGES: typescript,kotlin\n</code></pre> and modify the mount bindings according to your preference.</p>"},{"location":"docker-quickstart.html#custom-missionyml-file","title":"Custom mission.yml file","text":"<p>If you want to customize the mission.yml file, you may locally create a <code>mission.yml</code> file starting from the following template and adding any <code>instruments</code> or <code>environment</code> information you need.: <pre><code># The name of the mission *required\nmission: docker\n\n# The path to the target folder.\n# The target folder should contain all repositories *required\ntarget: /usr/project\n\n# A map of instrument names to commands and parameters.\n# When 'runsAll' is false the mission will run only the instruments\n# with the commands declared here, in this order.\ninstruments:\n\n# A map of environment variables, name to value, for voyager missions\n# overwrites the variables from global config\nenvironment:\n\n# Path to the directory containing the instruments\n# Default: ./instruments\ninstrumentsDir:\n\n# Path to the result archive file\n# Default: ./${mission}-voyager-results.zip\nresultsPath: results/voyager-results.zip\n</code></pre></p> <p>To pass the file to the container, you need to mount the file into the container instead of the /usr/voyager/mission.yml file (see docker-compose comments or use the <code>--mount</code> option with <code>docker run</code> command)</p>"},{"location":"docker-quickstart.html#verify-and-view-results","title":"Verify And View Results","text":"<p>When the voyager execution finishes, Voyager prints a Summary of all commands in the console. Please make sure that most of the tools have successfully executed.</p> <p>The results will be located in the result folder you mounted at <code>/usr/voyager/results</code> under the name <code>voyager-results.zip</code>.</p>"},{"location":"installing.html","title":"Installation &amp; Usage","text":"<p>Install Voyenv either as a global npm package or download the latest release from Github.</p>"},{"location":"installing.html#npm-installation","title":"NPM Installation","text":"<p>Install Voyenv through the NPM package manager. We have created a wrapper around the voyenv jar (using jdeploy) to easily install and upgrade the tool.</p> <pre><code>npm install @dx-works/voyenv -g\n</code></pre> <p>Verify the installation by running: <pre><code>voyenv -version\n</code></pre></p>"},{"location":"installing.html#usage","title":"Usage","text":"<p>To generate a Voyager release, open a command line in the folder you want to generate the release in. Before running the command you have to create a <code>yml</code> file described in the Configuration section, e.g. <code>my-voyenv.yml</code>.</p> <p>Run the following command in a terminal window: <pre><code>voyenv [path/to/voyenv/file]\n</code></pre></p> <p>The path to the voyenv.yml file is optional. If none is specified voyenv will search for a file named <code>voyenv.yml</code> in the current working directory. The voyager release will also be created in the current working directory.</p>"},{"location":"installing.html#github-release-download","title":"Github Release Download","text":"<p>Download the latest release from Github. Unpack the zip file to a folder and open a terminal window in the newly extracted folder.</p> <p>Run the following command to verify the installation:</p> <pre><code>java -jar voyenv.jar -version\n</code></pre>"},{"location":"installing.html#usage_1","title":"Usage","text":"<p>From the voyenv installation folder run: <pre><code>java -jar  voyenv.jar [path/to/voyenv/file.yml]\n</code></pre> The path to the voyenv.yml file is optional. If none is specified voyenv will search for a file named <code>voyenv.yml</code> in the current working directory. The voyager release will also be created in the current working directory.</p>"},{"location":"instruments.html","title":"Official Instruments","text":"<p>This is a list of official Voyager instruments that the dxworks team recognizes.</p>"},{"location":"instruments.html#software-metadata","title":"Software Metadata","text":""},{"location":"instruments.html#git-log","title":"Git Log","text":"<pre><code>  - name: dxworks/voyager-git-log-instrument\ntag: v1.0.0\nasset: git-log.zip\n</code></pre>"},{"location":"instruments.html#iglog","title":"Iglog","text":"<pre><code>  - name: dxworks/inspector-git\nasset: iglog.zip\n</code></pre>"},{"location":"instruments.html#code-analyzers","title":"Code Analyzers","text":""},{"location":"instruments.html#insider","title":"Insider","text":"<pre><code>  - name: dxworks/insider\nasset: insider-voyager.zip\n</code></pre>"},{"location":"instruments.html#dude","title":"DuDe","text":"<pre><code>  - name: dxworks/dude\nasset: dude-voyager.zip\n</code></pre>"},{"location":"instruments.html#lizard","title":"Lizard","text":"<pre><code>  - name: dxworks/lizard\n#    tag: v1.17.9-voyager\n</code></pre>"},{"location":"instruments.html#metrix","title":"Metrix++","text":"<pre><code>  - name: dxworks/metrixplusplus\n#    tag: v1.7.1-voyager\n</code></pre>"},{"location":"instruments.html#fact-extractors","title":"Fact Extractors","text":""},{"location":"instruments.html#honeydew","title":"Honeydew","text":"<pre><code>  - name: dxworks/honeydew\nasset: honeydew.zip\n</code></pre>"},{"location":"instruments.html#jafax","title":"JaFaX","text":"<pre><code>  - name: dxworks/jafax\nasset: jafax.zip\n</code></pre>"},{"location":"instruments.html#library-extractors","title":"Library Extractors","text":""},{"location":"instruments.html#mami","title":"MaMi","text":"<pre><code>  - name: dxworks/maven-miner\nasset: maven-miner-voyager.zip\n</code></pre>"},{"location":"instruments.html#nomi","title":"NoMi","text":"<pre><code>  - name: dxworks/npm-miner\nasset: npm-miner-voyager.zip\n</code></pre>"},{"location":"quickstart.html","title":"Quick Start","text":""},{"location":"quickstart.html#download-assets","title":"Download Assets","text":""},{"location":"quickstart.html#voyager_home-folder","title":"VOYAGER_HOME Folder","text":"<p>Download a Voyager archive and unzip it to a folder of your choosing. We will call this folder <code>VOYAGER_HOME</code>.  The latest Voyager archive with all instruments is available here. If you want to run Voyager in Docker, please visit our Voyager Docker Quickstart Guide.</p>"},{"location":"quickstart.html#prepare-target-folder","title":"Prepare TARGET Folder","text":"<p>The <code>TARGET</code> folder is the folder that Voyager will analyze. The children of the <code>TARGET</code> folder should be folders that are git repositories.</p> <p>To create a correct configuration for voyager, open a terminal window in a folder of your choosing and run the following steps:</p>"},{"location":"quickstart.html#create-an-empty-target-folder","title":"Create an empty target folder","text":"<pre><code>mkdir voyager-target\ncd voyager-target\n</code></pre>"},{"location":"quickstart.html#clone-repositories","title":"Clone repositories","text":"<p>Clone all repositories you want to analyze in the voyager-repos folder. Make sure to checkout the main branch for each repository. <pre><code>git clone &lt;repo1-url&gt;\ncd &lt;repo1&gt;\ngit checkout &lt;repo1-main-branch&gt;\n\ngit clone &lt;repo2-url&gt;\ncd &lt;repo2&gt;\ngit checkout &lt;repo2-main-branch&gt;\n</code></pre></p>"},{"location":"quickstart.html#final-structure","title":"Final Structure:","text":"<p>In the end you should get a folder structure that looks like this: <pre><code>voyager-target\n    repo1\n        .git\n        ...\n    repo2\n        .git\n        ...\n    ...\n    repoN\n        .git\n        ...\n</code></pre></p>"},{"location":"quickstart.html#the-target-directory","title":"The TARGET Directory","text":"<p>The <code>TARGET</code> directory is the absolute path to the <code>voyager-target</code> folder defined in the steps above.</p>"},{"location":"quickstart.html#configure-mission","title":"Configure Mission","text":"<p>Open the <code>mission.yml</code> file from the <code>VOYAGER_HOME</code> folder in a text editor and fill in the <code>target</code> field with the <code>TARGET</code> directory.</p> <pre><code># The path to the target folder.\n# The target folder should contain all repositories *required\ntarget: &lt;path/to/TARGET&gt;\n</code></pre> <p>Optionally, you can give your mission a special name, usually the name of the system it is analyzing <pre><code># The name of the mission *required\nmission: &lt;system-name&gt;\n</code></pre></p>"},{"location":"quickstart.html#verify-runtimes-are-properly-installed","title":"Verify Runtimes are properly installed","text":"<p>To check that Voyager has access to all required runtime environments, open a terminal window in the VOYAGER_HOME folder and run the following command:</p> Windows <pre><code>voyager.bat doctor\n</code></pre> Mac / Linux <pre><code>./voyager.sh doctor\n</code></pre> <p>Please check that all version checks have passed.</p> <p>Attention</p> <p>If the versions have not passed, please make sure you have the required runtime dependencies installed and available on the path. Try to run the doctor command again, until it passes.</p>"},{"location":"quickstart.html#run-voyager","title":"Run voyager","text":"<p>To run voyager, run the following command:</p> Windows <pre><code>voyager.bat </code></pre> Mac / Linux <pre><code>./voyager.sh </code></pre>"},{"location":"quickstart.html#verify-and-view-results","title":"Verify And View Results","text":"<p>When the voyager execution finishes, Voyager prints a Summary of all commands in the console. Please make sure that most of the tools have successfully executed.</p> <p>The results will be located in the $missionName-voyager-results.zip archive.</p>"},{"location":"runtimes.html","title":"Runtimes","text":"<p>For now <code>voyenv</code> supports downloading and preparing runtimes for Java and Python.</p>"},{"location":"runtimes.html#java","title":"Java","text":"<p>TBA</p>"},{"location":"runtimes.html#python","title":"Python","text":"<p>TBA</p>"}]}